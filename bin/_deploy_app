#!/bin/sh

. /usr/local/bin/loadmyvars.sh

IP=$1
name=$2
boot=$3
deployapp=$4
fstab=/iocage/tags/${name}/fstab

fstab_ports_readonly() {
    local name=$1
    local fstab=$2
    install -d /var/ports
    install -d /iocage/tags/${name}/root/var/ports
    if [ -e ${fstab} ]; then
        cat >${fstab} <<EOF
/var/ports                      /iocage/tags/${name}/root/var/ports             nullfs    ro    0    0
EOF
    fi

}

fstab_ports_write() {
    local name=$1
    local fstab=$2
    install -d /usr/ports
    install -d /var/ports
    install -d /var/db/portsnap
    install -d /iocage/tags/${name}/root/usr/ports
    install -d /iocage/tags/${name}/root/var/db/portsnap
    install -d /iocage/tags/${name}/root/var/ports
    if [ -e ${fstab} ]; then
        cat >${fstab} <<EOF
/usr/ports                      /iocage/tags/${name}/root/usr/ports             nullfs    rw    0    0
/var/db/portsnap                /iocage/tags/${name}/root/var/db/portsnap       nullfs    rw    0    0
/var/ports                      /iocage/tags/${name}/root/var/ports             nullfs    rw    0    0
EOF
    fi

}

if [ "x" = "x${NIC}" ]; then
    NIC="lo1"
    if ! ifconfig ${NIC} >/dev/null ; then
        ifconfig ${NIC} create
    fi
fi

if ! iocage list -r | grep 'RELEASE' >/dev/null 2>/dev/null ; then
    ioc-setup
    if ! iocage list -r | grep 'RELEASE' >/dev/null 2>/dev/null ; then
        echo "ERROR: iocage release doesn't exist, something went wrong."
        exit 1
    fi
fi

if ! iocage get tag ${name} >/dev/null 2>/dev/null; then
    # typically only in here if deploying a single app not with _deploy_jails, eg.
    # env NIC=lo1 IP=10.7.7.7
    if [ "x" = "x$IP" ]; then
        echo "Usage: ${0##*/} name 10.7.7.253 boot_on/off app_name"
        exit 1
    fi
    echo "Creating: ${name} on ${NIC} w/ IP $IP"
    ioc-newjail ${name} "${NIC}|${IP}"
fi
if [ "x" = "x${boot}" ]; then
    boot=off
fi
if [ "x" = "x${deployapp}" ]; then
    deployapp=${name}
fi

sysrc -f $( ioc-pathof ${name} )/etc/rc.conf.d/firstboot_jail firstboot_jail_deploy=${deployapp}
sysrc -f $( ioc-pathof ${name} )/etc/rc.conf.d/firstboot_jail firstboot_jail_fqdn=${FQDN}
sysrc -f $( ioc-pathof ${name} )/etc/rc.conf.d/firstboot_jail firstboot_jail_reposrc=${REPOSRC}


### install some deploy_* scripts for firstboot
install -d -m 755 -o root -g wheel $( ioc-pathof ${name} )/usr/local/bin
for i in $( ls /usr/local/bin/deploy_* ) ; do
    install -C -m 755 $i $( ioc-pathof ${name} )/usr/local/bin/
done


# PRE START
case ${name} in
    builder*)
        fstab_ports_write ${name} ${fstab}
    ;;
    squid|squidnew)
        fstab_ports_readonly ${name} ${fstab}
    ;;
    froxlor)
        fstab_ports_readonly ${name} ${fstab}
    ;;
    vnc)
        fstab_ports_readonly ${name} ${fstab}
        install -d /iocage/tags/${name}/root/usr/home
        if [ -e ${fstab} -a -e ${PERSONALMNT}/vnc/usr/home ]; then
            cat >>${fstab} <<EOF
${PERSONALMNT}/vnc/usr/home          /iocage/tags/${name}/root/usr/home       nullfs    rw    0    0
EOF
        fi
    ;;
    easydnsclient)
        install -d /iocage/tags/${name}/root/root/crontabbed
        if [ -e ${fstab} -a -e ${PERSONALMNT}/easydnsclient/root/crontabbed ]; then
            cat >>${fstab} <<EOF
${PERSONALMNT}/easydnsclient/root/crontabbed     /iocage/tags/${name}/root/root/crontabbed       nullfs    rw    0    0
EOF
        fi
    ;;
    gitlab)
        iocage set allow_sysvipc=1 ${name}
        fstab_ports_readonly ${name} ${fstab}
        ## only if we are installing via src to cache rubygems
        deploy_squid_sslcert_fetch ${name}
        # Set jail ip as FQDN so git-shell works
        grep -v " ${FQDN}" $( ioc-pathof ${name} )/etc/hosts >$( ioc-pathof ${name} )/etc/hosts.tmp
        cat $( ioc-pathof ${name} )/etc/hosts.tmp >$( ioc-pathof ${name} )/etc/hosts
        echo "${IPNET}`jailip gitlab` ${FQDN}" >>$( ioc-pathof ${name} )/etc/hosts
    ;;
    owncloud)
        iocage set allow_sysvipc=1 ${name}
        #if [         -d /root/local/owncloud ]; then
        #    mkdir -p                           $( ioc-pathof ${name} )/root/local/owncloud
        #    rsync -qalmP /root/local/owncloud/ $( ioc-pathof ${name} )/root/local/owncloud/
        #fi
    ;;
    horde)
        iocage set allow_sysvipc=1 ${name}
    ;;
    zfssyncstatus)
        install -d /usr/local/www/data
        install -d /iocage/tags/${name}/root/usr/local/www/data
        install -d /iocage/tags/${name}/root/var/hostlog
        if [ -e ${fstab} ]; then
            cat >${fstab} <<EOF
/usr/local/www/data    /iocage/tags/${name}/root/usr/local/www/data    nullfs    ro    0    0
/var/log               /iocage/tags/${name}/root/var/hostlog           nullfs    ro    0    0
EOF
        fi
    ;;
    ampache)
        install -d ${PERSONALMNT}/audio
        install -d ${PERSONALMNT}/video
        install -d /iocage/tags/${name}/root/data/audio
        install -d /iocage/tags/${name}/root/data/video
        fstab_ports_readonly ${name} ${fstab}
        if [ -e ${fstab} ]; then
            cat >>${fstab} <<EOF
${PERSONALMNT}/audio            /iocage/tags/${name}/root/data/audio            nullfs    ro    0    0
${PERSONALMNT}/video            /iocage/tags/${name}/root/data/video            nullfs    ro    0    0
EOF
        fi
    ;;
    nginx|nginxnew)
        SSLPATH=/etc/ssl/letsencrypt
        install -d /iocage/tags/${name}/root${SSLPATH}
        zfs list tank/ssl/letsencrypt >/dev/null 2>&1 || zfs create -p -o mountpoint=${SSLPATH} tank/ssl/letsencrypt
        zfs list tank/ssl/crontabbed >/dev/null 2>&1 || zfs create -p tank/ssl/crontabbed
        zfs list tank/ssl/sites-enabled >/dev/null 2>&1 || zfs create -p tank/ssl/sites-enabled
        zfs list tank/ssl/www >/dev/null 2>&1 || zfs create -p tank/ssl/www
        install -d /iocage/tags/${name}/root/root/crontabbed
        if [ -e ${fstab} ]; then
            cat >${fstab} <<EOF
${SSLPATH}               /iocage/tags/${name}/root${SSLPATH}                           nullfs    rw    0    0
/tank/ssl/crontabbed     /iocage/tags/${name}/root/root/crontabbed                     nullfs    rw    0    0
/tank/ssl/sites-enabled  /iocage/tags/${name}/root/usr/local/etc/nginx/sites-enabled   nullfs    rw    0    0
/tank/ssl/www            /iocage/tags/${name}/root/usr/local/www                       nullfs    rw    0    0
EOF
        fi
    ;;
esac



iocage start ${name}
iocage set boot=${boot} ${name}



# AFTER START
case ${name} in
    nginx|nginxnew)
        deploy_nginx_config ${name} nodomain nodomain              ${FQDN}
        deploy_nginx_domains ${name}
        # deploy_nginx_domains does a nginx reload
    ;;
    owncloud)
        #rsync -qalmP $( ioc-pathof ${name} )/root/local/owncloud/ /root/local/owncloud/
    ;;
esac
