#!/bin/sh

# READY, kinda

######################################################################
# Script version is yymmdd-HHMMSS in UTC, date -u +%y%m%d-%H%M%S
######################################################################
SCRIPTVERSION=150629-154330

if [ "x" == "x${GITLABSRC}" ]; then
    GITLABSRC=https://gitlab.com/
fi

DB="gitlabhq_production"
DBUSER="git"
DBPASS="password"
ROOTPASS="password"
BRANCH="7-8-stable"

if [ "x" != "x${GITLABROOTPASS}" ]; then
    ROOTPASS=${GITLABROOTPASS}
fi
if [ "x" != "x${GITLABDBPASS}" ]; then
    DBPASS=${GITLABDBPASS}
fi
if [ "x" != "x${GITLABBRANCH}" ]; then
    BRANCH=${GITLABBRANCH}
fi

# Based on https://www.b1c1l1.com/blog/2011/05/09/using-utf-8-unicode-on-freebsd/
# and https://github.com/gitlabhq/gitlab-recipes/blob/master/install/freebsd/freebsd-10.md
# and https://blog.assemblyco.de/installing-gitlab-on-freebsd-10/

# 0 jail needs export jail_**MY_JAIL_NAME**_parameters="allow.sysvipc=1"
if sysctl -a | grep security.jail.sysvipc_allowed >/dev/null ; then
    if sysctl security.jail.sysvipc_allowed | grep 0 >/dev/null ; then
        echo "This jail is not configured to allow sysvipc."
        echo "you need to add jail_example_parameters=\"allow.sysvipc=1\""
        exit 1
    fi
fi

if [ "x" == "x${FQDN}" ]; then
    echo "Please set or export variable FQDN"
    exit 1
fi

echo 1 UTF-8
#pkg install -y sudo
#if ! locale | grep 'UTF-8' ; then
#    patch -N /etc/login.conf <<EOF
#EOF
#    sudo cap_mkdb /etc/login.conf
#fi


echo 2 Dependencies
# to overwrite mailer.conf
yes y | pkg install -fy postfix

pkg install -y sudo bash icu cmake pkgconf git nginx ruby ruby21-gems logrotate redis postgresql94-server krb5

# different uid so shared memory of postgresql don't clash
pw usermod -n pgsql -u 1100

if [ ! -e /usr/local/bin/createuser ]; then
    echo "ERROR: install failed"
    exit 1
fi

if [ "x" == "x${HTTP_PROXY}" ]; then
    echo "ERROR: expecting HTTP_PROXY"
    exit 1
fi

gem install bundler --no-ri --no-rdoc

if sysctl security.jail.jailed | grep 0 >/dev/null ; then
    #sysrc ntpd_enable="YES"
    #sysrc ntpd_sync_on_start="YES"
    # use openntpd instead
    sysrc openntpd_enable="YES"
    service openntpd start
fi
sysrc sshd_enable="YES"
sysrc redis_enable="YES"
sysrc postgresql_enable="YES"
sysrc gitlab_enable="YES"
#sysrc nginx_enable="YES"
service sendmail onestop
sysrc postfix_enable="YES"
sysrc sendmail_enable="NO"
sysrc sendmail_submit_enable="NO"
sysrc sendmail_outbound_enable="NO"
sysrc sendmail_msp_queue_enable="NO"


echo 3 git user
echo "git:1005:::::GitLab:/usr/home/git:/usr/local/bin/bash:" | adduser -w no -f -
pw user mod git -G redis


echo 4 postgresql
service postgresql initdb
service postgresql start
/usr/local/bin/createuser -U pgsql ${DBUSER}
/usr/local/bin/createdb -E utf8 -U pgsql -O ${DBUSER} ${DB}
/usr/local/bin/psql -U pgsql -d template1 -c "ALTER ROLE ${DBUSER} WITH password '${DBPASS}';"
if [ ! -e /usr/local/pgsql/data/pg_hba.conf.dist ]; then
    cp -a /usr/local/pgsql/data/pg_hba.conf /usr/local/pgsql/data/pg_hba.conf.dist
fi
cat >/usr/local/pgsql/data/pg_hba.conf <<EOF
local   all             all                                     trust
host    all             all             127.0.0.1/32            trust
host    all             all             ::1/128                 trust
hostnossl  ${DB}   ${DBUSER}    samehost                trust
EOF
service postgresql restart


echo 5 redis
if [ ! -e /usr/local/etc/redis.conf.orig ]; then
    cp /usr/local/etc/redis.conf /usr/local/etc/redis.conf.orig
fi
sed 's/^port .*/port 0/' /usr/local/etc/redis.conf.orig >/usr/local/etc/redis.conf
echo 'unixsocket /usr/local/var/run/redis/redis.sock' >>/usr/local/etc/redis.conf
echo 'unixsocketperm 770' >>/usr/local/etc/redis.conf
mkdir -p /usr/local/var/run/redis
chown redis:redis /usr/local/var/run/redis
chmod 755 /usr/local/var/run/redis
service redis start


echo 6 gitlab
cd /usr/home/git
if [         -d /root/local/gitcache/gitlab-org/gitlab-ce.git ]; then
    rsync -qalP /root/local/gitcache/gitlab-org/gitlab-ce.git/ /usr/home/git/gitlab/
    chown -R git /usr/home/git/gitlab/
    cd /usr/home/git/gitlab/
    sudo -u git -i -- git checkout -t origin/${BRANCH} || sudo -u git -i -- git checkout ${BRANCH}
    sudo -u git -i -- git pull origin ${BRANCH}
fi
if [ ! -d /usr/home/git/gitlab ]; then
    sudo -u git -H git clone ${GITLABSRC}gitlab-org/gitlab-ce.git -b ${BRANCH} gitlab
fi
chown -R git /usr/home/git/gitlab
cd /usr/home/git/gitlab
sudo -u git -H cp /usr/home/git/gitlab/config/gitlab.yml.example /usr/home/git/gitlab/config/gitlab.yml
#The option host: should be set to your domain, e.g. "gitlab.mysite.com".
#The line bin_path: should be set to FreeBSD's git location: /usr/local/bin/git.
#sudo -u git -H vi config/gitlab.yml
if sysctl security.jail.jailed | grep 1 >/dev/null ; then
    cat /usr/home/git/gitlab/config/gitlab.yml.example \
    | sed 's/# ssh_port: 22/ssh_port: 23/' \
    | sed "s/host: localhost/host: ${FQDN}/" \
    | sed 's/port: 80/port: 443/' \
    | sed 's/https: false/https: true/' \
    | sed 's;bin_path: /usr/bin/git;bin_path: /usr/local/bin/git;' \
    | sed 's; /home/git/; /usr/home/git/;g' \
    >/usr/home/git/gitlab/config/gitlab.yml
#    | sed 's/# email_enabled: true/email_enabled: false/' \
else
    cat /usr/home/git/gitlab/config/gitlab.yml.example \
    | sed "s/host: localhost/host: ${FQDN}/" \
    | sed 's/port: 80/port: 443/' \
    | sed 's/https: false/https: true/' \
    | sed 's;bin_path: /usr/bin/git;bin_path: /usr/local/bin/git;' \
    | sed 's; /home/git/; /usr/home/git/;g' \
    >/usr/home/git/gitlab/config/gitlab.yml
#    | sed 's/# email_enabled: true/email_enabled: false/' \
fi
cd /usr/home/git/gitlab
chown -R git /usr/home/git/gitlab/log/
chown -R git /usr/home/git/gitlab/tmp/
chmod -R u+rwX,go-w /usr/home/git/gitlab/log/
chmod -R u+rwX /usr/home/git/gitlab/tmp/
sudo -u git -H mkdir /usr/home/git/gitlab-satellites
sudo -u git -H chmod u+rwx,g=rx,o-rwx /usr/home/git/gitlab-satellites
sudo -u git -H chmod -R u+rwX /usr/home/git/gitlab/tmp/pids/
sudo -u git -H chmod -R u+rwX /usr/home/git/gitlab/tmp/sockets/
sudo -u git -H chmod -R u+rwX /usr/home/git/gitlab/public/uploads/
sudo -u git -H cp /usr/home/git/gitlab/config/unicorn.rb.example /usr/home/git/gitlab/config/unicorn.rb
# Set the number of workers to at least the number of cores
#sudo -u git -H vi config/unicorn.rb
cat /usr/home/git/gitlab/config/unicorn.rb.example \
| sed 's/worker_processes 2/worker_processes 1/' \
| sed 's;\"/home;\"/usr/home;g' \
>/usr/home/git/gitlab/config/unicorn.rb
sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb
# Configure Git global settings for git user, useful when editing via web
# Edit user.email according to what is set in gitlab.yml
sudo -u git -H git config --global user.name "GitLab"
sudo -u git -H git config --global user.email "example@example.com"
sudo -u git -H git config --global core.autocrlf "input"
sudo -u git -H cp /usr/home/git/gitlab/config/resque.yml.example /usr/home/git/gitlab/config/resque.yml
# Configure Redis to use the modified socket path
# Change 'production' line to 'unix:/usr/local/var/run/redis/redis.sock'
#sudo -u git -H vi config/resque.yml
cat /usr/home/git/gitlab/config/resque.yml.example \
| sed 's;/var/run/redis/redis.sock;/usr/local/var/run/redis/redis.sock;' \
>/usr/home/git/gitlab/config/resque.yml
sudo -u git -H cp /usr/home/git/gitlab/config/database.yml.postgresql /usr/home/git/gitlab/config/database.yml
sudo -u git -H env HTTP_PROXY=${HTTP_PROXY} bundle install --deployment --without development test mysql aws


echo 7 GitLab Shell
sudo -u git -H env HTTP_PROXY=${HTTP_PROXY} bundle exec rake gitlab:shell:install[v2.4.1] REDIS_URL=unix:/usr/local/var/run/redis/redis.sock RAILS_ENV=production
# Edit the gitlab-shell config
# Change the 'socket' option to '/usr/local/var/run/redis/redis.sock'
# Change the 'gitlab_url' option to 'http://localhost:8080/'
# Don't bother configuring any SSL stuff in here because it's used internally
#sudo -u git -H vi /usr/home/git/gitlab-shell/config.yml
#TODO cat /usr/home/git/gitlab-shell/config.yml | sed 's;;;' | tee /usr/home/git/gitlab-shell/config.yml


echo 8 Initialise Database
yes yes | sudo -u git -H env HTTP_PROXY=${HTTP_PROXY} bundle exec rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=${ROOTPASS}


echo 9 Init script
#wget -O /usr/local/etc/rc.d/gitlab https://gitlab.com/gitlab-org/gitlab-recipes/raw/master/init/init/freebsd/gitlab-unicorn
cp /home/git/gitlab/lib/support/init.d/gitlab /usr/local/etc/rc.d/gitlab
chmod a+x /usr/local/etc/rc.d/gitlab


echo 10 compile
cd /usr/home/git/gitlab
sudo -u git -H env HTTP_PROXY=${HTTP_PROXY} bundle exec rake gitlab:env:info RAILS_ENV=production
sudo -u git -H env HTTP_PROXY=${HTTP_PROXY} bundle exec rake assets:precompile RAILS_ENV=production
sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production


echo 11 start
service gitlab start


echo 12 nginx
#wget -O /usr/local/etc/nginx/sites-enabled/gitlab.conf https://gitlab.com/gitlab-org/gitlab-ce/raw/master/lib/support/nginx/gitlab-ssl
#cp /usr/home/git/gitlab/lib/support/nginx/gitlab /usr/local/etc/nginx/sites-enabled/gitlab.conf
#cat /usr/home/git/gitlab/lib/support/nginx/gitlab \
#| sed 's/gzip_static on;/#gzip_static on;/' \
#>/usr/local/etc/nginx/sites-enabled/gitlab.conf
#pw user mod www -G git
#chmod g+rx /usr/home/git/
#service nginx start


echo Other services: SSH
if sysctl security.jail.jailed | grep 1 >/dev/null ; then
    cat /etc/ssh/sshd_config \
    | sed 's/#Port 22/Port 23/' \
    >/etc/ssh/sshd_config.tmp
    cat /etc/ssh/sshd_config.tmp >/etc/ssh/sshd_config
    rm /etc/ssh/sshd_config.tmp
fi
sysrc sshd_rsa1_enable="NO"
sysrc sshd_dsa_enable="NO"
sysrc sshd_ecdsa_enable="NO"
service sshd start


echo Other services: MAIL
service postfix start
sysrc -f /etc/periodic.conf daily_clean_hoststat_enable="NO"
sysrc -f /etc/periodic.conf daily_status_mail_rejects_enable="NO"
sysrc -f /etc/periodic.conf daily_status_include_submit_mailq="NO"
sysrc -f /etc/periodic.conf daily_submit_queuerun="NO"



cat >/usr/local/etc/rc.d/gitlabwrapper <<EOF
#!/bin/sh
# PROVIDE: gitlab
# REQUIRE: postgres
. /etc/rc.subr
name="gitlab"
start_cmd="local_start"
stop_cmd="local_stop"
local_start()
{
    /usr/local/etc/rc.d/gitlab start
}
local_stop()
{
    /usr/local/etc/rc.d/gitlab stop
}
load_rc_config \$name
run_rc_command "\$1"
EOF
chmod +x /usr/local/etc/rc.d/gitlabwrapper

echo
JAILIP=`ifconfig | grep inet | awk '{print $2}'`
cat <<EOF
Visit http://${JAILIP}/
Login as root:${ROOTPASS}
Repos to clone:
    https://github.com/johnko/*
    https://github.com/johnko/dtfc.git
    https://github.com/qq99/echoplexus.git
    https://gitlab.com/gitlab-org/gitlab-ce.git
EOF
